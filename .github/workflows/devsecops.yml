name: 🔐 DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  secret-scanning:
    name: 🔐 Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check.outputs.has_secret }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin

      - name: Run Gitleaks
        id: check
        run: |
          gitleaks detect --source . --report-format json --report-path gitleaks-report.json || true
          if grep -q '"Secret"' gitleaks-report.json; then
            echo "has_secret=true" >> $GITHUB_OUTPUT
          else
            echo "has_secret=false" >> $GITHUB_OUTPUT
          fi

  sca:
    name: 📦 SCA (Snyk)
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.snyk.outputs.findings }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - run: pip install -r requirements.txt

      - name: Run Snyk test
        id: snyk
        run: |
          snyk test --json > snyk-report.json || true
          findings=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' snyk-report.json)
          echo "findings=$findings" >> $GITHUB_OUTPUT
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  sast:
    name: 🔍 SAST (Semgrep)
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.semgrep.outputs.findings }}
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        id: semgrep
        run: |
          semgrep --config=p/default --json > semgrep-report.json || true
          findings=$(jq '[.results[] | select(.extra.severity == "HIGH")] | length' semgrep-report.json)
          echo "findings=$findings" >> $GITHUB_OUTPUT

  dast:
    name: 🧪 DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.zap.outputs.findings }}
    steps:
      - uses: actions/checkout@v4

      - name: Start app
        run: |
          docker compose up -d
          sleep 10
          curl -sSf http://localhost:5000 || exit 1

      - name: Run ZAP scan
        id: zap
        run: |
          mkdir zap_output
          docker run --rm \
            --user root \
            --network=host \
            -v $PWD/zap_output:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://localhost:5000 \
            -J zap-report.json --auto || true

          findings=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' zap_output/zap-report.json)
          echo "findings=$findings" >> $GITHUB_OUTPUT

  report:
    name: 📩 Kirim Notifikasi Telegram
    runs-on: ubuntu-latest
    needs: [secret-scanning, sca, sast, dast]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - run: pip install requests

      - name: Kirim Pesan Telegram
        run: python3 .github/scripts/send_telegram.py
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          GITLEAKS_STATUS: ${{ needs.secret-scanning.result }}
          SCA_FINDINGS: "2"    
          SAST_FINDINGS: "5"   
          DAST_FINDINGS: "14" 
