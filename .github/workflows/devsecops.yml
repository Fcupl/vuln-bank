name: üîê DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  secret-scanning:
    name: üîê Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin

      - name: Run Gitleaks and generate report
        run: |
          gitleaks detect --source . --report-format json --report-path reports/gitleaks-report.json || true

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  sca:
    name: üì¶ SCA (Synk)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Run Snyk test
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test

      - name: Run Snyk monitor (optional)
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
        
  sast:
    name: üîç SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/default
          args: --sarif -o semgrep.sarif

      - name: Upload SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.sarif

  dast:
    name: üß™ DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: [secret-scanning, sca, sast]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start app (adjust for your case)
        run: |
          docker compose up -d
          docker ps
          sleep 15
          curl -I http://localhost:5000 || (echo "Target tidak bisa diakses!" && exit 1)

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:5000'
          cmd_options: '-r zap-report.html -w zap-report.md -J zap-report.json'
          artifact_name: zap-report

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-html
          path: zap-report.html

  report:
    name: üì© Kirim Notifikasi Telegram
    runs-on: ubuntu-latest
    needs: [secret-scanning, sca, sast, dast]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Unduh artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Kirim Notifikasi
        run: python3 .github/scripts/send_telegram.py
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
