name: üîê DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  secret-scanning:
    name: üîê Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2.2.0
        with:
          config-path: .github/gitleaks.toml
        continue-on-error: true
        # Optional: ubah sesuai kebutuhan

      - name: Save Gitleaks result
        if: always()
        run: mv gitleaks-report.json ${{ github.workspace }}/gitleaks-report.json

      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  sca:
    name: üì¶ SCA (Syft + Grype)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0.14.3
        with:
          output-file: sbom.syft.json

      - name: Scan vulnerabilities (Grype)
        uses: anchore/scan-action@v3
        with:
          sbom: sbom.syft.json

      - uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype.sarif.json

  sast:
    name: üîç SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/default
          generateSarif: true

      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.sarif

  dast:
    name: üß™ DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: [secret-scanning, sca, sast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start app (adjust for your case)
        run: |
          docker-compose up -d
          sleep 15

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8000'
          format: html
          report: zap-report.html

      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html

  report:
    name: üì© Notifikasi Telegram
    runs-on: ubuntu-latest
    needs: [secret-scanning, sca, sast, dast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install requests

      - name: Send Telegram Message
        run: python3 .github/scripts/send_telegram.py
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
