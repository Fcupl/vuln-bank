name: 🔐 DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  secret-scanning:
    name: 🔐 Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin

      - name: Run Gitleaks and generate report
        run: |
          gitleaks detect --source . --report-format json --report-path gitleaks-report.json || true

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  sca:
    name: 📦 SCA (Synk)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Run Snyk test
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test

      - name: Run Snyk monitor (optional)
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
        
  sast:
    name: 🔍 SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/default
          args: --sarif -o semgrep.sarif

      - name: Upload SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.sarif

  dast:
    name: 🧪 DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: [secret-scanning, sca, sast]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start app (adjust for your case)
        run: |
          docker-compose up -d
          sleep 15

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8000'
          format: html
          report: zap-report.html

      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html

  report:
    name: 📩 Kirim Notifikasi Telegram
    runs-on: ubuntu-latest
    needs: [secret-scanning, sca, sast, dast]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install requests
        run: pip install requests

      - name: Kirim Notifikasi ke Telegram
        run: |
          SS_STATUS="${{ needs.secret-scanning.result }}"
          SCA_STATUS="${{ needs.sca.result }}"
          SAST_STATUS="${{ needs.sast.result }}"
          DAST_STATUS="${{ needs.dast.result }}"

          # Konversi ke emoji
          emoji() {
            if [ "$1" == "success" ]; then echo "✅"; else echo "❌"; fi
          }

          STATUS_SUMMARY="📢 Pipeline DevSecOps Selesai%0A%0A"
          STATUS_SUMMARY+="🔐 Secret Scanning (Gitleaks): $(emoji $SS_STATUS)%0A"
          STATUS_SUMMARY+="📦 SCA (Snyk): $(emoji $SCA_STATUS)%0A"
          STATUS_SUMMARY+="🔍 SAST (Semgrep): $(emoji $SAST_STATUS)%0A"
          STATUS_SUMMARY+="🧪 DAST (ZAP): $(emoji $DAST_STATUS)%0A%0A"

          if [[ "$SS_STATUS" == "success" && "$SCA_STATUS" == "success" && "$SAST_STATUS" == "success" && "$DAST_STATUS" == "success" ]]; then
            STATUS_SUMMARY+="📊 Status keseluruhan: 🟢 Berhasil%0A"
          else
            STATUS_SUMMARY+="📊 Status keseluruhan: 🔴 GAGAL%0A"
          fi

          STATUS_SUMMARY+="🔗 https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "$STATUS_SUMMARY" > message.txt

          python3 .github/scripts/send_telegram.py "$(cat message.txt)"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
